# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 09:30:43 2019

@author: Waikikilick
"""
#说明：本程序中，量子态的行向量形式用 psi 来代表，如：psi = np.matrix([[1+2j],[3+4j]])
#                      数组形式用 state 来代表，如 state = np.array([1,3,2,4])

import numpy as np
from scipy.linalg import expm

class Env( object): 
    def __init__(self,noise_a=0,training_num=10,validating_num=100): #允许的动作，默认两个分立值，只是默认值，真正值由调用时输入):
        self.n_features = 8 #描述状态所用的长度
        self.training_num = training_num #训练集的数据量
        self.validating_num = validating_num #验证集的数据量
        
        
        self.target = np.mat([[1], [0], [0], [1]], dtype=complex)/np.sqrt(2) #最终目标态
        self.nstep=0 
        self.dt=np.pi/40
        self.step_max = 10 * np.pi / self.dt 
        self.h_1 = 1
        self.h_2 = 1
        self.I = np.matrix(np.identity(2, dtype=complex))
        self.sigma_x = np.mat([[0, 1], [1, 0]], dtype=complex)
        self.sigma_z = np.mat([[1, 0], [0, -1]], dtype=complex)
        self.action_space=np.array([[1,1],
                                    [1,2],
                                    [1,3],
                                    [1,4],
                                    [1,5],
                                    [2,1],
                                    [2,2],
                                    [2,3],
                                    [2,4],
                                    [2,5],
                                    [3,1],
                                    [3,2],
                                    [3,3],
                                    [3,4],
                                    [3,5],
                                    [4,1],
                                    [4,2],
                                    [4,3],
                                    [4,4],
                                    [4,5],
                                    [5,1],
                                    [5,2],
                                    [5,3],
                                    [5,4],
                                    [5,5]])
        
        self.n_actions = len(self.action_space)
        self.noise_a = noise_a
        
        self.noise_normal_1 = np.array(
                  [ 1.62434536e+00, -6.11756414e-01, -5.28171752e-01, -1.07296862e+00,
                    8.65407629e-01, -2.30153870e+00,  1.74481176e+00, -7.61206901e-01,
                    3.19039096e-01, -2.49370375e-01,  1.46210794e+00, -2.06014071e+00,
                   -3.22417204e-01, -3.84054355e-01,  1.13376944e+00, -1.09989127e+00,
                   -1.72428208e-01, -8.77858418e-01,  4.22137467e-02,  5.82815214e-01,
                   -1.10061918e+00,  1.14472371e+00,  9.01590721e-01,  5.02494339e-01,
                    9.00855949e-01, -6.83727859e-01, -1.22890226e-01, -9.35769434e-01,
                   -2.67888080e-01,  5.30355467e-01, -6.91660752e-01, -3.96753527e-01,
                   -6.87172700e-01, -8.45205641e-01, -6.71246131e-01, -1.26645989e-02,
                   -1.11731035e+00,  2.34415698e-01,  1.65980218e+00,  7.42044161e-01,
                   -1.91835552e-01, -8.87628964e-01, -7.47158294e-01,  1.69245460e+00,
                    5.08077548e-02, -6.36995647e-01,  1.90915485e-01,  2.10025514e+00,
                    1.20158952e-01,  6.17203110e-01,  3.00170320e-01, -3.52249846e-01,
                   -1.14251820e+00, -3.49342722e-01, -2.08894233e-01,  5.86623191e-01,
                    8.38983414e-01,  9.31102081e-01,  2.85587325e-01,  8.85141164e-01,
                   -7.54397941e-01,  1.25286816e+00,  5.12929820e-01, -2.98092835e-01,
                    4.88518147e-01, -7.55717130e-02,  1.13162939e+00,  1.51981682e+00,
                    2.18557541e+00, -1.39649634e+00, -1.44411381e+00, -5.04465863e-01,
                    1.60037069e-01,  8.76168921e-01,  3.15634947e-01, -2.02220122e+00,
                   -3.06204013e-01,  8.27974643e-01,  2.30094735e-01,  7.62011180e-01,
                   -2.22328143e-01, -2.00758069e-01,  1.86561391e-01,  4.10051647e-01,
                    1.98299720e-01,  1.19008646e-01, -6.70662286e-01,  3.77563786e-01,
                    1.21821271e-01,  1.12948391e+00,  1.19891788e+00,  1.85156417e-01,
                   -3.75284950e-01, -6.38730407e-01,  4.23494354e-01,  7.73400683e-02,
                   -3.43853676e-01,  4.35968568e-02, -6.20000844e-01,  6.98032034e-01,
                   -4.47128565e-01,  1.22450770e+00,  4.03491642e-01,  5.93578523e-01,
                   -1.09491185e+00,  1.69382433e-01,  7.40556451e-01, -9.53700602e-01,
                   -2.66218506e-01,  3.26145467e-02, -1.37311732e+00,  3.15159392e-01,
                    8.46160648e-01, -8.59515941e-01,  3.50545979e-01, -1.31228341e+00,
                   -3.86955093e-02, -1.61577235e+00,  1.12141771e+00,  4.08900538e-01,
                   -2.46169559e-02, -7.75161619e-01,  1.27375593e+00,  1.96710175e+00,
                   -1.85798186e+00,  1.23616403e+00,  1.62765075e+00,  3.38011697e-01,
                   -1.19926803e+00,  8.63345318e-01, -1.80920302e-01, -6.03920628e-01,
                   -1.23005814e+00,  5.50537496e-01,  7.92806866e-01, -6.23530730e-01,
                    5.20576337e-01, -1.14434139e+00,  8.01861032e-01,  4.65672984e-02,
                   -1.86569772e-01, -1.01745873e-01,  8.68886157e-01,  7.50411640e-01,
                    5.29465324e-01,  1.37701210e-01,  7.78211279e-02,  6.18380262e-01,
                    2.32494559e-01,  6.82551407e-01, -3.10116774e-01, -2.43483776e+00,
                    1.03882460e+00,  2.18697965e+00,  4.41364444e-01, -1.00155233e-01,
                   -1.36444744e-01, -1.19054188e-01,  1.74094083e-02, -1.12201873e+00,
                   -5.17094458e-01, -9.97026828e-01,  2.48799161e-01, -2.96641152e-01,
                    4.95211324e-01, -1.74703160e-01,  9.86335188e-01,  2.13533901e-01,
                    2.19069973e+00, -1.89636092e+00, -6.46916688e-01,  9.01486892e-01,
                    2.52832571e+00, -2.48634778e-01,  4.36689932e-02, -2.26314243e-01,
                    1.33145711e+00, -2.87307863e-01,  6.80069840e-01, -3.19801599e-01,
                   -1.27255876e+00,  3.13547720e-01,  5.03184813e-01,  1.29322588e+00,
                   -1.10447026e-01, -6.17362064e-01,  5.62761097e-01,  2.40737092e-01,
                    2.80665077e-01, -7.31127037e-02,  1.16033857e+00,  3.69492716e-01,
                    1.90465871e+00,  1.11105670e+00,  6.59049796e-01, -1.62743834e+00,
                    6.02319280e-01,  4.20282204e-01,  8.10951673e-01,  1.04444209e+00,
                   -4.00878192e-01,  8.24005618e-01, -5.62305431e-01,  1.95487808e+00,
                   -1.33195167e+00, -1.76068856e+00, -1.65072127e+00, -8.90555584e-01,
                   -1.11911540e+00,  1.95607890e+00, -3.26499498e-01, -1.34267579e+00,
                    1.11438298e+00, -5.86523939e-01, -1.23685338e+00,  8.75838928e-01,
                    6.23362177e-01, -4.34956683e-01,  1.40754000e+00,  1.29101580e-01,
                    1.61694960e+00,  5.02740882e-01,  1.55880554e+00,  1.09402696e-01,
                   -1.21974440e+00,  2.44936865e+00, -5.45774168e-01, -1.98837863e-01,
                   -7.00398505e-01, -2.03394449e-01,  2.42669441e-01,  2.01830179e-01,
                    6.61020288e-01,  1.79215821e+00, -1.20464572e-01, -1.23312074e+00,
                   -1.18231813e+00, -6.65754518e-01, -1.67419581e+00,  8.25029824e-01,
                   -4.98213564e-01, -3.10984978e-01, -1.89148284e-03, -1.39662042e+00,
                   -8.61316361e-01,  6.74711526e-01,  6.18539131e-01, -4.43171931e-01,
                    1.81053491e+00, -1.30572692e+00, -3.44987210e-01, -2.30839743e-01,
                   -2.79308500e+00,  1.93752881e+00,  3.66332015e-01, -1.04458938e+00,
                    2.05117344e+00,  5.85662000e-01,  4.29526140e-01, -6.06998398e-01,
                    1.06222724e-01, -1.52568032e+00,  7.95026094e-01, -3.74438319e-01,
                    1.34048197e-01,  1.20205486e+00,  2.84748111e-01,  2.62467445e-01,
                    2.76499305e-01, -7.33271604e-01,  8.36004719e-01,  1.54335911e+00,
                    7.58805660e-01,  8.84908814e-01, -8.77281519e-01, -8.67787223e-01,
                   -1.44087602e+00,  1.23225307e+00, -2.54179868e-01,  1.39984394e+00,
                   -7.81911683e-01, -4.37508983e-01,  9.54250872e-02,  9.21450069e-01,
                    6.07501958e-02,  2.11124755e-01,  1.65275673e-02,  1.77187720e-01,
                   -1.11647002e+00,  8.09271010e-02, -1.86578994e-01, -5.68244809e-02,
                    4.92336556e-01, -6.80678141e-01, -8.45080274e-02, -2.97361883e-01,
                    4.17302005e-01,  7.84770651e-01, -9.55425262e-01,  5.85910431e-01,
                    2.06578332e+00, -1.47115693e+00, -8.30171895e-01, -8.80577600e-01,
                   -2.79097722e-01,  1.62284909e+00,  1.33526763e-02, -6.94693595e-01,
                    6.21803504e-01, -5.99804531e-01,  1.12341216e+00,  3.05267040e-01,
                    1.38877940e+00, -6.61344243e-01,  3.03085711e+00,  8.24584625e-01,
                    6.54580153e-01, -5.11884476e-02, -7.25597119e-01, -8.67768678e-01,
                   -1.35977326e-01, -7.97269785e-01,  2.82675712e-01, -8.26097432e-01,
                    6.21082701e-01,  9.56121704e-01, -7.05840507e-01,  1.19268607e+00,
                   -2.37941936e-01,  1.15528789e+00,  4.38166347e-01,  1.12232832e+00,
                   -9.97019796e-01, -1.06793987e-01,  1.45142926e+00, -6.18036848e-01,
                   -2.03720123e+00, -1.94258918e+00, -2.50644065e+00, -2.11416392e+00,
                   -4.11639163e-01,  1.27852808e+00, -4.42229280e-01,  3.23527354e-01,
                   -1.09991490e-01,  8.54894544e-03, -1.68198840e-01, -1.74180344e-01,
                    4.61164100e-01, -1.17598267e+00,  1.01012718e+00,  9.20017933e-01,
                   -1.95057341e-01,  8.05393424e-01, -7.01344426e-01, -5.37223024e-01,
                    1.56263850e-01, -1.90221025e-01, -4.48738033e-01, -6.72448039e-01,
                   -5.57494722e-01,  9.39168744e-01, -1.94332341e+00,  3.52494364e-01,
                   -2.36436952e-01,  7.27813500e-01,  5.15073614e-01, -2.78253447e+00,
                    5.84646610e-01,  3.24274243e-01,  2.18628366e-02, -4.68673816e-01,
                    8.53281222e-01, -4.13029310e-01,  1.83471763e+00,  5.64382855e-01,
                    2.13782807e+00, -7.85533997e-01, -1.75592564e+00,  7.14789597e-01,
                    8.52704062e-01,  3.53600971e-02, -1.53879325e+00, -4.47895185e-01,
                    6.17985534e-01, -1.84176326e-01, -1.15985185e-01, -1.75458969e-01,
                   -9.33914656e-01, -5.33020326e-01, -1.42655542e+00,  1.76795995e+00,
                   -4.75372875e-01,  4.77610182e-01, -1.02188594e+00,  7.94528240e-01,
                   -1.87316098e+00,  9.20615118e-01, -3.53679249e-02,  2.11060505e+00, -1.30653407e+00])

        #noise_normal 为均值为 0 ，标准差为 1 的正态分布的随机数组成的数组
        #该随机数由 np.random.seed(1) 生成: np.random.seed(1) \ noise_uniform = np.random.normal(loc=0.0, scale=1.0, size=401)
        
        
        self.noise_normal_2 = np.array(
                   [-4.16757847e-01, -5.62668272e-02, -2.13619610e+00,  1.64027081e+00,
                    -1.79343559e+00, -8.41747366e-01,  5.02881417e-01, -1.24528809e+00,
                    -1.05795222e+00, -9.09007615e-01,  5.51454045e-01,  2.29220801e+00,
                     4.15393930e-02, -1.11792545e+00,  5.39058321e-01, -5.96159700e-01,
                    -1.91304965e-02,  1.17500122e+00, -7.47870949e-01,  9.02525097e-03,
                    -8.78107893e-01, -1.56434170e-01,  2.56570452e-01, -9.88779049e-01,
                    -3.38821966e-01, -2.36184031e-01, -6.37655012e-01, -1.18761229e+00,
                    -1.42121723e+00, -1.53495196e-01, -2.69056960e-01,  2.23136679e+00,
                    -2.43476758e+00,  1.12726505e-01,  3.70444537e-01,  1.35963386e+00,
                     5.01857207e-01, -8.44213704e-01,  9.76147160e-06,  5.42352572e-01,
                    -3.13508197e-01,  7.71011738e-01, -1.86809065e+00,  1.73118467e+00,
                     1.46767801e+00, -3.35677339e-01,  6.11340780e-01,  4.79705919e-02,
                    -8.29135289e-01,  8.77102184e-02,  1.00036589e+00, -3.81092518e-01,
                    -3.75669423e-01, -7.44707629e-02,  4.33496330e-01,  1.27837923e+00,
                    -6.34679305e-01,  5.08396243e-01,  2.16116006e-01, -1.85861239e+00,
                    -4.19316482e-01, -1.32328898e-01, -3.95702397e-02,  3.26003433e-01,
                    -2.04032305e+00,  4.62555231e-02, -6.77675577e-01, -1.43943903e+00,
                     5.24296430e-01,  7.35279576e-01, -6.53250268e-01,  8.42456282e-01,
                    -3.81516482e-01,  6.64890091e-02, -1.09873895e+00,  1.58448706e+00,
                    -2.65944946e+00, -9.14526229e-02,  6.95119605e-01, -2.03346655e+00,
                    -1.89469265e-01, -7.72186654e-02,  8.24703005e-01,  1.24821292e+00,
                    -4.03892269e-01, -1.38451867e+00,  1.36723542e+00,  1.21788563e+00,
                    -4.62005348e-01,  3.50888494e-01,  3.81866234e-01,  5.66275441e-01,
                     2.04207979e-01,  1.40669624e+00, -1.73795950e+00,  1.04082395e+00,
                     3.80471970e-01, -2.17135269e-01,  1.17353150e+00, -2.34360319e+00,
                     1.16152149e+00,  3.86078048e-01, -1.13313327e+00,  4.33092555e-01,
                    -3.04086439e-01,  2.58529487e+00,  1.83533272e+00,  4.40689872e-01,
                    -7.19253841e-01, -5.83414595e-01, -3.25049628e-01, -5.60234506e-01,
                    -9.02246068e-01, -5.90972275e-01, -2.76179492e-01, -5.16883894e-01,
                    -6.98589950e-01, -9.28891925e-01,  2.55043824e+00, -1.47317325e+00,
                    -1.02141473e+00,  4.32395701e-01, -3.23580070e-01,  4.23824708e-01,
                     7.99179995e-01,  1.26261366e+00,  7.51964849e-01, -9.93760983e-01,
                     1.10914328e+00, -1.76491773e+00, -1.14421297e-01, -4.98174194e-01,
                    -1.06079904e+00,  5.91666521e-01, -1.83256574e-01,  1.01985473e+00,
                    -1.48246548e+00,  8.46311892e-01,  4.97940148e-01,  1.26504175e-01,
                    -1.41881055e+00, -2.51774118e-01, -1.54667461e+00, -2.08265194e+00,
                     3.27974540e+00,  9.70861320e-01,  1.79259285e+00, -4.29013319e-01,
                     6.96197980e-01,  6.97416272e-01,  6.01515814e-01,  3.65949071e-03,
                    -2.28247558e-01, -2.06961226e+00,  6.10144086e-01,  4.23496900e-01,
                     1.11788673e+00, -2.74242089e-01,  1.74181219e+00, -4.47500876e-01,
                    -1.25542722e+00,  9.38163671e-01, -4.68346260e-01, -1.25472031e+00,
                     1.24823646e-01,  7.56502143e-01,  2.41439629e-01,  4.97425649e-01,
                     4.10869262e+00,  8.21120877e-01,  1.53176032e+00, -1.98584577e+00,
                     3.65053516e-01,  7.74082033e-01, -3.64479092e-01, -8.75979478e-01,
                     3.96520159e-01, -3.14617436e-01, -5.93755583e-01,  1.14950057e+00,
                     1.33556617e+00,  3.02629336e-01, -4.54227855e-01,  5.14370717e-01,
                     8.29458431e-01,  6.30621967e-01, -1.45336435e+00, -3.38017777e-01,
                     3.59133332e-01,  6.22220414e-01,  9.60781945e-01,  7.58370347e-01,
                    -1.13431848e+00, -7.07420888e-01, -1.22142917e+00,  1.80447664e+00,
                     1.80409807e-01,  5.53164274e-01,  1.03302907e+00, -3.29002435e-01,
                    -1.15100294e+00, -4.26522471e-01, -1.48147191e-01,  1.50143692e+00,
                     8.69598198e-01, -1.08709057e+00,  6.64221413e-01,  7.34884668e-01,
                    -1.06136574e+00, -1.08516824e-01, -1.85040397e+00,  3.30488064e-01,
                    -3.15693210e-01, -1.35000210e+00, -6.98170998e-01,  2.39951198e-01,
                    -5.52949440e-01,  2.99526813e-01,  5.52663696e-01, -8.40443012e-01,
                    -3.12270670e-01,  2.14467809e+00,  1.21105582e-01, -8.46828752e-01,
                     6.04624490e-02, -1.33858888e+00,  1.13274608e+00,  3.70304843e-01,
                     1.08580640e+00,  9.02179395e-01,  3.90296450e-01,  9.75509412e-01,
                     1.91573647e-01, -6.62209012e-01, -1.02351498e+00, -4.48174823e-01,
                    -2.50545813e+00,  1.82599446e+00, -1.71406741e+00, -7.66395640e-02,
                    -1.31756727e+00, -2.02559359e+00, -8.22453750e-02, -3.04666585e-01,
                    -1.59724130e-01,  5.48946560e-01, -6.18375485e-01,  3.78794466e-01,
                     5.13251444e-01, -3.34844125e-01, -2.83519516e-01,  5.38424263e-01,
                     5.72509465e-02,  1.59088487e-01, -2.37440268e+00,  5.85199353e-02,
                     3.76545911e-01, -1.35479764e-01,  3.35908395e-01,  1.90437591e+00,
                     8.53644334e-02,  6.65334278e-01, -8.49995503e-01, -8.52341797e-01,
                    -4.79985112e-01, -1.01964910e+00, -7.60113841e-03, -9.33830661e-01,
                    -1.74996844e-01, -1.43714343e+00, -1.65220029e+00, -6.75661789e-01,
                    -1.06706712e+00, -6.52931145e-01, -6.12094750e-01, -3.51262461e-01,
                     1.04547799e+00,  1.36901602e+00,  7.25353259e-01, -3.59474459e-01,
                     1.49695179e+00, -1.53111111e+00, -2.02336394e+00,  2.67972576e-01,
                    -2.20644541e-03, -1.39291883e-01,  3.25654693e-02, -1.64056022e+00,
                    -1.15669917e+00,  1.23403468e+00,  1.02818490e+00, -7.21879726e-01,
                     1.93315697e+00, -1.07079633e+00, -5.71381608e-01,  2.92432067e-01,
                    -1.19499989e+00, -4.87930544e-01, -1.73071165e-01, -3.95346401e-01,
                     8.70840765e-01,  5.92806797e-01, -1.09929731e+00, -6.81530644e-01,
                     1.80066685e-01, -6.69310440e-02, -7.87749540e-01,  4.24753672e-01,
                     8.19885117e-01, -6.31118683e-01,  7.89059649e-01, -1.62167380e+00,
                    -1.61049926e+00,  4.99939764e-01, -8.34515207e-01, -9.96959687e-01,
                    -2.63388077e-01, -6.77360492e-01,  3.27067038e-01, -1.45535944e+00,
                    -3.71519124e-01,  3.16096597e+00,  1.09951013e-01, -1.91352322e+00,
                     5.99820429e-01,  5.49384465e-01,  1.38378103e+00,  1.48349243e-01,
                    -6.53541444e-01,  1.40883398e+00,  7.12061227e-01, -1.80071604e+00,
                     7.47598942e-01, -2.32897001e-01,  1.11064528e+00, -3.73338813e-01,
                     7.86146070e-01,  1.94168696e-01,  5.86204098e-01, -2.03872918e-02,
                    -4.14408598e-01,  6.73134124e-02,  6.31798924e-01,  4.17592731e-01,
                     1.61517627e+00,  4.25606211e-01,  6.35363758e-01,  2.10222927e+00,
                     6.61264168e-02,  5.35558351e-01, -6.03140792e-01,  4.19576292e-02,
                     1.64191464e+00,  3.11697707e-01,  1.45116990e+00, -1.06492788e+00,
                    -1.40084545e+00,  3.07525527e-01, -1.36963867e+00,  2.67033724e+00,
                     1.24845030e+00, -1.24572655e+00, -1.67168774e-01, -5.76610930e-01,
                     4.16021749e-01, -5.78472626e-02,  9.31887358e-01,  1.46833213e+00,
                    -2.21320943e-01, -1.17315562e+00,  5.62669078e-01, -1.64515057e-01,
                     1.14485538e+00, -1.52117687e-01,  8.29789046e-01,  3.36065952e-01,
                    -1.89044051e-01, -4.49328601e-01,  7.13524448e-01,  2.52973487e+00,
                     8.37615794e-01, -1.31682403e-01,  7.07592866e-01,  1.14053878e-01,
                    -1.28089518e+00,  3.09846277e-01,  1.54829069e+00, -3.15828043e-01,
                    -1.12590378e+00,  4.88496666e-01,  1.83094666e+00,  9.40175993e-01,
                     1.01871705e+00,  2.30237829e+00,  1.62109298e+00,  7.12683273e-01,
                    -2.08703629e-01,  1.37617991e-01, -1.03352168e-01,  8.48350567e-01, -8.83125561e-01])

        #noise_normal 为均值为 0 ，标准差为 1 的正态分布的随机数组成的数组
        #该随机数由 np.random.seed(1) 生成: np.random.seed(2) \ noise_uniform = np.random.normal(loc=0.0, scale=1.0, size=401)
        
        self.noise_1 = self.noise_a * self.noise_normal_1
        self.noise_2 = self.noise_a * self.noise_normal_2
        
        
              
#总的数据集----------------------------------------------------------------------------------------
        alpha_num = 4
        
        theta = [0,np.pi/4,np.pi/2]
        theta_1 = theta
        theta_2 = theta
        theta_3 = theta
        
        alpha = np.linspace(0,np.pi*2,alpha_num,endpoint=False)
        alpha_1 = alpha
        alpha_2 = alpha
        alpha_3 = alpha
        alpha_4 = alpha
        
        a_list_complex = np.matrix([[0,0,0,0]],dtype=complex) #第一行用来占位，否则无法和其他行并在一起，在最后要注意去掉这一行
        for ii in range(3): #theta_1
            for jj in range(3): #theta_2
                for kk in range(3): #theta_3
                    for mm in range(alpha_num): #alpha_1
                        for nn in range(alpha_num): #alpha_2
                            for oo in range(alpha_num): #alpha_3
                                for pp in range(alpha_num): #alpha_4
                                    
                                    a_1_mo = np.cos(theta_1[ii])
                                    a_2_mo = np.sin(theta_1[ii])*np.cos(theta_2[jj])
                                    a_3_mo = np.sin(theta_1[ii])*np.sin(theta_2[jj])*np.cos(theta_3[kk])
                                    a_4_mo = np.sin(theta_1[ii])*np.sin(theta_2[jj])*np.sin(theta_3[kk])
                                    
                                    a_1_real = a_1_mo*np.cos(alpha_1[mm])
                                    a_1_imag = a_1_mo*np.sin(alpha_1[mm])
                                    a_2_real = a_2_mo*np.cos(alpha_2[nn])
                                    a_2_imag = a_2_mo*np.sin(alpha_2[nn])
                                    a_3_real = a_3_mo*np.cos(alpha_3[oo])
                                    a_3_imag = a_3_mo*np.sin(alpha_3[oo])
                                    a_4_real = a_4_mo*np.cos(alpha_4[pp])
                                    a_4_imag = a_4_mo*np.sin(alpha_4[pp])
                                    
                                    a_1_complex = a_1_real + a_1_imag*1j
                                    a_2_complex = a_2_real + a_2_imag*1j
                                    a_3_complex = a_3_real + a_3_imag*1j
                                    a_4_complex = a_4_real + a_4_imag*1j
                                    
                                    a_complex = np.matrix([[ a_1_complex, a_2_complex, a_3_complex, a_4_complex]])
                                    a_list_complex = np.row_stack((a_list_complex,a_complex))
                                    
        self.a_list_complex = np.array(np.delete(a_list_complex,0,axis=0)) # 删除矩阵的第一行
        np.random.shuffle(self.a_list_complex) #打乱顺序
#--------------------------------------------------------------------------------- 

#训练、验证集和测试集---------------------------------------------------------------------------
        self.training_set = self.a_list_complex[:self.training_num]
        
        self.validating_set = self.a_list_complex[self.training_num:self.training_num+self.validating_num]
        
        self.testing_set = self.a_list_complex[self.training_num+self.validating_num:self.training_num+self.validating_num+1000]
#--------------------------------------------------------------------------------- 

    def vrrset(self,k):
            init_state = self.validating_set[k] #[1, 0, 0, 0] 形式
            self.init_state = np.array(init_state.real.tolist() + init_state.imag.tolist())
            return self.init_state

    def trrset(self,k):
            init_state = self.testing_set[k] #[1, 0, 0, 0] 形式
            self.init_state = np.array(init_state.real.tolist() + init_state.imag.tolist())
            return self.init_state

    def rrset(self,k):
            init_state = self.training_set[k] #[1, 0, 0, 0] 复数形式
            self.init_state = np.array(init_state.real.tolist() + init_state.imag.tolist())#实向量形式
            return self.init_state
      
    def reset(self): 
        #训练和测试中
        #在一个新的回合开始时，归位到开始选中的那个点上
        self.state = self.init_state
        self.nstep = 0 

        return self.state

    def step(self, action):
        psi = np.array([self.state[0:int(len(self.state) / 2)] + self.state[int(len(self.state) / 2):int(len(self.state))] * 1j])
        #array([[1实 + 1虚j, 2实 + 2虚j]])
        
        psi = psi.T
        #array([[1实 + 1虚j],
        #        2实 + 2虚j]])

        psi=np.mat(psi) 
        #matrix([[ 1实 + 1虚j],
       #         [ 2实 + 2虚j]])
        J_1, J_2=  self.action_space[action,0], self.action_space[action,1]  # control field strength
        J_12 = J_1 * J_2 /2
        
        H =  (J_1*np.kron(self.sigma_z, self.I) + J_2*np.kron(self.I, self.sigma_z) + \
                        J_12/2*np.kron((self.sigma_z-self.I),(self.sigma_z-self.I)) + \
           self.h_1*np.kron(self.sigma_x,self.I) + self.h_2*np.kron(self.I,self.sigma_x))/2

        U = expm(-1j * H * self.dt) 


        psi = U * psi  # next state

        err = 10e-3
        fid = (np.abs(psi.H * self.target) ** 2).item(0).real 
        
        rwd = (1000*fid)*(fid<(1-err)) + 5000*(fid>=(1-err))

        done = ( ((1-fid) < err) or self.nstep >= self.step_max ) 
        self.nstep +=1  

        #再将量子态的 psi 形式恢复到 state 形式。
        #（因为复数没有梯度可言，神经网络在训练时，需要用实数来进行反向传递）
        psi = np.array(psi)
        psi_T = psi.T
        self.state = np.array(psi_T.real.tolist()[0] + psi_T.imag.tolist()[0])

        return self.state, rwd, done, fid

# J 动态噪声-------------------------------------------------------------------------------------    
    def step_noise_J(self, action):
        psi = np.array([self.state[0:int(len(self.state) / 2)] + self.state[int(len(self.state) / 2):int(len(self.state))] * 1j])
        psi = psi.T
        
        psi=np.mat(psi) 
        J_1, J_2=  self.action_space[int(action),0], self.action_space[int(action),1]  # control field strength
        J_1 += self.noise_1[self.nstep] #加入噪声1
        J_2 += self.noise_2[self.nstep] #加入噪声2
        J_12 = J_1 * J_2 /2
        H =  (J_1*np.kron(self.sigma_z, self.I) + J_2*np.kron(self.I, self.sigma_z) + \
                        J_12/2*np.kron((self.sigma_z-self.I),(self.sigma_z-self.I)) + \
           self.h_1*np.kron(self.sigma_x,self.I) + self.h_2*np.kron(self.I,self.sigma_x))/2

        U = expm(-1j * H * self.dt) 
        psi = U * psi  # next state
        err = 10e-2
        fid = (np.abs(psi.H * self.target) ** 2).item(0).real 
        rwd = (fid*(10**3))*(fid<(1-err)) + 5000*(fid>=(1-err))
        done = ( ((1-fid) < err) or self.nstep >= self.step_max ) 
        self.nstep +=1  
        psi = np.array(psi)
        psi_T = psi.T
        self.state = np.array(psi_T.real.tolist()[0] + psi_T.imag.tolist()[0])
        return self.state, rwd, done, fid
    
# h 动态噪声----------------------------------------------------------------------------------------
    def step_noise_h(self, action):
        psi = np.array([self.state[0:int(len(self.state) / 2)] + self.state[int(len(self.state) / 2):int(len(self.state))] * 1j])
        #array([[1实 + 1虚j, 2实 + 2虚j]])
        
        psi = psi.T
        psi=np.mat(psi) 
        J_1, J_2=  self.action_space[int(action),0], self.action_space[int(action),1]  # control field strength
        J_12 = J_1 * J_2 /2
        
        h_1 = self.h_1 + self.noise_1[self.nstep] #加入噪声1
        h_2 = self.h_2 + self.noise_2[self.nstep] #加入噪声2
        
        
        H =  (J_1*np.kron(self.sigma_z, self.I) + J_2*np.kron(self.I, self.sigma_z) + \
                        J_12/2*np.kron((self.sigma_z-self.I),(self.sigma_z-self.I)) + \
                  h_1*np.kron(self.sigma_x,self.I) + h_2*np.kron(self.I,self.sigma_x))/2

        U = expm(-1j * H * self.dt) 


        psi = U * psi  # next state

        err = 10e-3
        fid = (np.abs(psi.H * self.target) ** 2).item(0).real 
        
        rwd = (fid*(10**3))*(fid<(1-err)) + 5000*(fid>=(1-err))


        done = ( ((1-fid) < err) or self.nstep >= self.step_max ) 
        self.nstep +=1  

        psi = np.array(psi)
        psi_T = psi.T
        self.state = np.array(psi_T.real.tolist()[0] + psi_T.imag.tolist()[0])

        return self.state, rwd, done, fid 
# J 静态噪声-------------------------------------------------------------------------------------    
    def step_noise_drift_J(self, action):
        psi = np.array([self.state[0:int(len(self.state) / 2)] + self.state[int(len(self.state) / 2):int(len(self.state))] * 1j])
        psi = psi.T
        psi=np.mat(psi) 
        J_1, J_2 = self.action_space[int(action),0]+self.noise_a, self.action_space[int(action),1]+self.noise_a  # control field strength
        J_12 = J_1 * J_2 /2
        
        H =  (J_1*np.kron(self.sigma_z, self.I) + J_2*np.kron(self.I, self.sigma_z) + \
                        J_12/2*np.kron((self.sigma_z-self.I),(self.sigma_z-self.I)) + \
           self.h_1*np.kron(self.sigma_x,self.I) + self.h_2*np.kron(self.I,self.sigma_x))/2

        U = expm(-1j * H * self.dt) 
        psi = U * psi  # next state

        err = 10e-3
        fid = (np.abs(psi.H * self.target) ** 2).item(0).real 
        
        rwd = (fid*(10**3))*(fid<(1-err)) + 5000*(fid>=(1-err))
        
        done = ( ((1-fid) < err) or self.nstep >= self.step_max ) 
        self.nstep +=1  

        psi = np.array(psi)
        psi_T = psi.T
        self.state = np.array(psi_T.real.tolist()[0] + psi_T.imag.tolist()[0])

        return self.state, rwd, done, fid
    
# h 静态噪声-------------------------------------------------------------------------------------------
    def step_noise_drift_h(self, action):
        psi = np.array([self.state[0:int(len(self.state) / 2)] + self.state[int(len(self.state) / 2):int(len(self.state))] * 1j])
        psi = psi.T
        psi=np.mat(psi) 
        J_1, J_2 = self.action_space[int(action),0], self.action_space[int(action),1]  # control field strength
        J_12 = J_1 * J_2 /2
        h_1, h_2 = self.h_1+self.noise_a, self.h_2+self.noise_a
        H =  (J_1*np.kron(self.sigma_z, self.I) + J_2*np.kron(self.I, self.sigma_z) + \
                        J_12/2*np.kron((self.sigma_z-self.I),(self.sigma_z-self.I)) + \
                h_1*np.kron(self.sigma_x,self.I) + h_2*np.kron(self.I,self.sigma_x))/2

        U = expm(-1j * H * self.dt) 
        psi = U * psi  # next state

        err = 10e-3
        fid = (np.abs(psi.H * self.target) ** 2).item(0).real 
        
        rwd = (fid*(10**3))*(fid<(1-err)) + 5000*(fid>=(1-err))
        
        done = ( ((1-fid) < err) or self.nstep >= self.step_max ) 
        self.nstep +=1  

        psi = np.array(psi)
        psi_T = psi.T
        self.state = np.array(psi_T.real.tolist()[0] + psi_T.imag.tolist()[0])

        return self.state, rwd, done, fid
    
    
    
    
    
    
    
    